1/10) Is the program leak.c vulnerable to a buffer overflow of type stack smashing/control hijacking?
(If yes why, if no why)

2/10) Is the program leak.c vulnerable to a buffer overflow of type information exfiltration?
(If yes why, if no why)

3/10) Is the program leak.c vulnerable if stack protectors (canaries) are in place?
(If yes why, if no why)

4/10) Can not executable stack prevent the return loop in loop3.c?
(If yes why, if no why)

5/10) Can stack protectors (canaries) prevent the return loop in loop3.c?
(If yes why, if no why)

6/10) Can ASLR prevent the return loop in loop3.c?
(If yes why, if no why)

Let's make the Hypothesis that there is no "system" function call in the libc library
7/10) Is it still possible to make a Return Oriented Programming attack?
(If yes why, if no why)

Let's make the Hypothesis that there is no "system" function call in the libc library
8/10) Is it possible to make a return to libc attack that activates any program that is present on the system?
(If yes why, if no why and which are the restrictions)

9/10) Does ASLR protect from a return to libc attack?
(If yes why, if no why)


Assume you know the address of a http server with the shellshock vulnerability and a myCommand CGI program available (in the default CGI-BIN folder).
10/10) Write the curl command that makes an http request that exploits the shellshock vulnerability and executes the "cat /etc/passwd" command redirecting the output to a file named pippo.txt in the folder /tmp on the remote server
